import 'dart:convert';
import 'dart:io';

import 'globals.dart';
import 'log.dart';

String getConfigFileText({
  String? link,
  String? earlier,
  String? later,
  String? regex,
  String? keep,
  String? username,
  String? password,
  String? ftphost,
  String? frequency,
  String? smtpHost,
  String? smtpPort,
  String? smtpUser,
  String? smtpPassword,
  String? smtpEmailSenderName,
  String? smtpEmailRecipients,
  String? smtpEmailSubject,
  String? smtpEmailContent,
}) =>
    """
Config file generated by Record on Calendar
version: $version
Only change values after colons! Leave a space after the colons!

iCal link for calendar
link: ${link ?? ""}
Update frequency of calendar (minutes)
frequency: ${frequency ?? "30"}

Start recording minutes earlier then calendar event start
earlier: ${earlier ?? "5"}

Stop recording minutes later then calendar event end
later: ${later ?? "30"}

Keep this number of latest recordings, delete older automatically (0 means never delete)
keep: ${keep ?? "0"}

Only record on events matching following regular expression (help: regexr.com)
"." means record every event
regex: ${regex ?? "."}

Upload files to FTP - leave host empty to disable
ftphost: ${ftphost ?? ""}
username: ${username ?? ""}
password: ${password ?? ""}


Send email notification after last recording on a day
  - Email client settings
    Leave host empty to disable sending
smtpHost: ${smtpHost ?? ""}
smtpPort: ${smtpPort ?? 0}
smtpUser: ${smtpUser ?? ""}
smtpPassword: ${smtpPassword ?? ""}

  - Email settings
  Example for email recipients: ["example@example.com", "tim@apple.com"]
smtpEmailRecipients: ${smtpEmailRecipients ?? '[""]'}
smtpEmailSenderName: ${smtpEmailSenderName ?? "Record On Calendar"}
smtpEmailSubject: ${smtpEmailSubject ?? "Today's recorded events"}
smtpEmailContent:
${smtpEmailContent ?? """
Replace me! This is the content of your email. It ends where the file ends.

Recorded events today:
[today list]

Next 5 events to record in the future:
[future list]

Successfully recorded [stat - success count] events so far. Failed [stat - failed count] times.

Email sent at [time]
"""}
""";

String? getConfigValue(String name, String configString,
    {bool restOfFile = false}) {
  List<String> lines = configString.split("\n");

  if (restOfFile) {
    try {
      int lineIndex = lines.indexWhere((element) => element.startsWith(name));
      return lines.sublist(lineIndex + 1).join("\n");
    } catch (e) {
      return null;
    }
  } else {
    try {
      String val = lines
          .firstWhere((element) => element.startsWith(name))
          .substring(name.length + 2);
      return (val.isEmpty) ? null : val;
    } catch (e) {
      return null;
    }
  }
}

loadConfig() {
  String configString = configFile.readAsStringSync();

  //! Migrate
  if (getConfigValue('version', configString) != version) {
    configFile.writeAsStringSync(
      getConfigFileText(
        earlier: getConfigValue('earlier', configString),
        later: getConfigValue('later', configString),
        keep: getConfigValue('keep', configString),
        regex: getConfigValue('regex', configString),
        link: getConfigValue('link', configString),
        username: getConfigValue('username', configString),
        password: getConfigValue('password', configString),
        ftphost: getConfigValue('ftphost', configString),
        frequency: getConfigValue('frequency', configString),
        smtpHost: getConfigValue('smtpHost', configString),
        smtpPort: getConfigValue('smtpPort', configString),
        smtpUser: getConfigValue('smtpUser', configString),
        smtpPassword: getConfigValue('smtpPassword', configString),
        smtpEmailSenderName:
            getConfigValue('smtpEmailSenderName', configString),
        smtpEmailRecipients:
            getConfigValue('smtpEmailRecipients', configString),
        smtpEmailSubject: getConfigValue('smtpEmailSubject', configString),
        smtpEmailContent: getConfigValue('smtpEmailContent', configString),
      ),
    );
  }

  //! Load
  try {
    startEarlierByMinutes = int.parse(getConfigValue('earlier', configString)!);
    endLaterByMinutes = int.parse(getConfigValue('later', configString)!);
    keepRecordings = int.parse(getConfigValue('keep', configString)!);
    matchEventName = RegExp(getConfigValue('regex', configString)!);
    iCalUri = Uri.parse(getConfigValue('link', configString)!);
    ftpUsername = getConfigValue('username', configString);
    ftpPassword = getConfigValue('password', configString);
    ftpHost = getConfigValue('ftphost', configString);
    iCalUpdateFrequencyMinutes =
        int.parse(getConfigValue('frequency', configString)!);
    smtpHost = getConfigValue('smtpHost', configString);
    smtpPort = int.parse(getConfigValue('smtpPort', configString)!);
    smtpUser = getConfigValue('smtpUser', configString) ?? "";
    smtpPassword = getConfigValue('smtpPassword', configString) ?? "";
    smtpEmailSenderName =
        getConfigValue('smtpEmailSenderName', configString) ?? "";
    smtpEmailRecipients = jsonDecode(
            getConfigValue('smtpEmailRecipients', configString) ?? '[""]')
        .whereType<String>()
        .toList();
    smtpEmailSubject = getConfigValue('smtpEmailSubject', configString) ?? "";
    smtpEmailContent =
        getConfigValue('smtpEmailContent', configString, restOfFile: true) ??
            "";
  } catch (e, stack) {
    log.print(
        "Could not read config file! If this error persists, please delete file and let the program regenerate it by restarting.\n$e\n$stack");
    exit(1);
  }
}
